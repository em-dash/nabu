# took a bunch of stuff from here: 
# https://github.com/ziglang/zig-spec/blob/75129c7a34010ead828055c26a6d41d1516faa97/grammar/grammar.y
# using peg to make sure this is a real grammar

Root <- skip file_doc_comment? ModuleMembers eof

ModuleDecl <- KEYWORD_module IDENTIFIER LBRACE ModuleMembers RBRACE
ModuleMembers <- (FunctionDecl / EnumDecl / InterfaceDecl / StructDecl / VarDecl 
    / ModuleDecl / ErrorDecl)*

EnumDecl <- KEYWORD_enum IDENTIFIER LBRACE Decl* (EnumMember COMMA)* EnumMember? Decl* RBRACE
EnumMember <- IDENTIFIER (EQUALS INTEGER)?

StructDecl <- KEYWORD_struct IDENTIFIER GenericIdentifier? (KEYWORD_implements 
    ScopedIdentifier)* LBRACE Decl* (StructMember COMMA)* StructMember? Decl* RBRACE
StructMember <- IDENTIFIER COLON Type (EQUALS Literal)?

Literal <- STRINGLITERAL
    / ListLiteral
    / MapLiteral
    / StructLiteral
    / INTEGER
    / FLOAT

InterfaceDecl <- KEYWORD_interface IDENTIFIER LBRACE (InterfaceMember COMMA)* 
    InterfaceMember? RBRACE
InterfaceMember <- FunctionDecl / FunctionSignature

ErrorDecl <- KEYWORD_error IDENTIFIER LBRACE (IDENTIFIER COMMA)* IDENTIFIER? RBRACE

Decl <- VarDecl / FunctionDecl

GenericIdentifier <- LESS IDENTIFIER GREATER

FunctionDecl <- KEYWORD_fn IDENTIFIER GenericIdentifier? LPAREN (DeclParam COMMA)* DeclParam? 
    RPAREN ((ScopedIdentifier / ErrorDecl)? OCTOTHORPE)? Type Block

FunctionSignature <- KEYWORD_fn IDENTIFIER GenericIdentifier? LPAREN (Type COMMA)* Type? RPAREN
    ((ScopedIdentifier / ErrorDecl)? OCTOTHORPE)? Type

DeclParam <- IDENTIFIER COLON Type

# identifier:  Something.Whatever
# list:        [Int]
# map:         {String:Some_Object}
# reference:   *Blah
Type <- ScopedIdentifier
    / (LBRACKET Type RBRACKET)
    / (LBRACE ScopedIdentifier COLON Type RBRACE)
    / (ASTERISK Type)


ScopedIdentifier <- IDENTIFIER (DOT IDENTIFIER)*

VarDecl <- (KEYWORD_const / KEYWORD_var) IDENTIFIER (COLON ((ScopedIdentifier / ErrorDecl) 
    OCTOTHORPE)? Type)? EQUALS Expression SEMICOLON


# precedence levels (we go through these in reverse order)
# 1:  a() a[] a.b a.* a.?
# 2:  !x -x &x
# 3:  * / % **
# 4:  + - ++
# 5:  << >>
# 6:  catch orelse & ^ |
# 7:  == != < > <= >=
# 8:  and
# 9:  or

Expression <- OrExpression

OrExpression <- AndExpression (KEYWORD_or AndExpression)*

AndExpression <- CompareExpression (KEYWORD_and CompareExpression)*

CompareExpression <- CatchExpression (CompareOp CatchExpression)?
CompareOp <- EQUALSEQUALS / EXCLAMEQUALS / LESS / GREATER / LESSEQUALS
    / GREATEREQUALS

CatchExpression <- ShiftExpression (CatchOp ShiftExpression)*
CatchOp <- KEYWORD_catch / KEYWORD_orelse / AMPERSAND / CARET / PIPE

ShiftExpression <- AddExpression (ShiftOp AddExpression)*
ShiftOp <- LESSLESS / GREATERGREATER / LESSLESSPIPE

AddExpression <- MultiplyExpression (AddOp MultiplyExpression)*
AddOp <- PLUS / MINUS / PLUSPLUS / PLUSPIPE / PLUSPERCENT / MINUSPIPE / MINUSPERCENT

MultiplyExpression <- PrefixExpression (MultiplyOp PrefixExpression)*
MultiplyOp <- ASTERISK / FORWARDSLASH / PERCENT / ASTERISKASTERISK / ASTERISKPERCENT / ASTERISKPIPE

PrefixExpression <- PrefixOp* SuffixExpression
PrefixOp <- EXCLAM / MINUS / AMPERSAND / KEYWORD_try

SuffixExpression <- PrimaryExpression SuffixOp*
# 1:  a.* a.?
SuffixOp <- DOTASTERISK / DOTQUESTIONMARK / (LBRACKET Expression RBRACKET) / (LBRACKET Expression
    DOTDOT Expression RBRACKET)

PrimaryExpression <- FunctionCall
    / BlockLabel? Block
    / STRINGLITERAL
    / ListLiteral
    / MapLiteral
    / StructLiteral
    / INTEGER
    / FLOAT
    / IfExpression
    / KEYWORD_break BreakLabel? Expression?
    / KEYWORD_continue BreakLabel?
    / BlockLabel? LoopExpression
    / SwitchExpression
    / KEYWORD_return Expression?

AssignExpression <- ScopedIdentifier AssignOp Expression
AssignOp <- EQUALS / PLUSEQUALS / MINUSEQUALS / ASTERISKEQUALS / FORWARDSLASHEQUALS / PERCENTEQUALS
    / LESSLESSEQUALS / GREATERGREATEREQUALS / PLUSPERCENTEQUALS / PLUSPIPEEQUALS / MINUSPIPEEQUALS
    / MINUSPERCENTEQUALS / ASTERISKPERCENTEQUALS / LESSLESSEQUALS / GREATERGREATEREQUALS
    / LESSLESSPIPEEQUALS / AMPERSANDEQUALS / CARETEQUALS / PIPEEQUALS / ASTERISKPIPEEQUALS

FunctionCall <- ScopedIdentifier LPAREN (Expression COMMA)* Expression? RPAREN

Block <- LBRACE Statement* RBRACE

ListLiteral <- LBRACKET (Expression COMMA)* Expression? RBRACKET
    / LBRACKET INTEGER DOTDOT INTEGER (PIPE INTEGER)? RBRACKET

MapLiteral <- LBRACE (MapLiteralItem COMMA)* MapLiteralItem? RBRACE
MapLiteralItem <- Expression COLON Expression

StructLiteral <- (ScopedIdentifier / DOT) LBRACE (StructLiteralItem COMMA)* StructLiteralItem? RBRACE
StructLiteralItem <- DOT IDENTIFIER EQUALS Expression

IfExpression <- KEYWORD_if LPAREN Expression RPAREN PtrPayload? Expression
    (KEYWORD_else Payload? Expression)?

LoopExpression <- ForExpression / WhileExpression

WhileExpression <- KEYWORD_while LPAREN Expression RPAREN PtrPayload? COLON LPAREN AssignExpression
    RPAREN Expression (KEYWORD_else Expression)?

ForExpression <- KEYWORD_for LPAREN ForArgumentsList RPAREN PtrListPayload Expression 
    (KEYWORD_else Expression)?
ForArgumentsList <- ForItem (COMMA ForItem)* COMMA?
ForItem <- Expression (DOTDOT Expression?)?

Payload <- PIPE IDENTIFIER PIPE

PtrPayload <- PIPE ASTERISK? IDENTIFIER PIPE

PtrIndexPayload <- PIPE ASTERISK? IDENTIFIER (COMMA IDENTIFIER)? PIPE

PtrListPayload <- PIPE ASTERISK? IDENTIFIER (COMMA ASTERISK? IDENTIFIER)* COMMA? PIPE

SwitchExpression <- KEYWORD_switch LPAREN Expression RPAREN LBRACE (SwitchProng COMMA)* SwitchProng
    RBRACE

SwitchProng <- SwitchCase EQUALSGREATER PtrIndexPayload? Expression

SwitchCase
    <- SwitchItem (COMMA SwitchItem)* COMMA?
     / KEYWORD_else

SwitchItem <- Expression (DOTDOTDOT Expression)?

Statement <- IfExpression / SwitchExpression / WhileExpression / ForExpression / (KEYWORD_defer 
    / KEYWORD_errdefer)? Expression SEMICOLON



BlockLabel <- IDENTIFIER COLON

BreakLabel <- COLON IDENTIFIER

STRINGLITERALSINGLE <- "\"" string_char* "\"" skip
STRINGLITERAL
    <- STRINGLITERALSINGLE
     / (line_string skip)+


IDENTIFIER <- !keyword xid_start xid_continue* skip
    / "`" string_id_char* "`" skip
# i 'ardly know 'er ðŸ¤£

char_escape
    <- "\\x" hex hex
     / "\\u{" hex+ "}"
     / "\\" [nr\\t'"]

string_char
    <- char_escape
     / [^\\"\n]

string_id_char <- char_escape / [^\\`\n]

line_string <- ("\\\\" [^\n]* [ \n]*)+


# peg doesn't allow \Uhhhh escape sequences and i'm not converting this all to octal for no reason
# so just pretend xid_start and xid_continue are here
# xid_start <- lol
# xid_continue <- lmao

bin <- [01]
bin_ <- '_'? bin
oct <- [0-7]
oct_ <- '_'? oct
hex <- [0-9a-fA-F]
hex_ <- '_'? hex
dec <- [0-9]
dec_ <- '_'? dec

bin_int <- bin bin_*
oct_int <- oct oct_*
dec_int <- dec dec_*
hex_int <- hex hex_*

eof <- !.
file_doc_comment <- ('//!' [^\n]* [ \n]* skip)+
# doc_comment <- ('///' [^\n]* [ \n]* skip)+
line_comment <- '//' ![!/][^\n]* / '////' [^\n]*
skip <- ([ \n\r] / line_comment)

FLOAT
    <- "0x" hex_int "." hex_int ([pP] [-+]? dec_int)? skip
     /      dec_int "." dec_int ([eE] [-+]? dec_int)? skip
     / "0x" hex_int [pP] [-+]? dec_int skip
     /      dec_int [eE] [-+]? dec_int skip
INTEGER
    <- "0b" bin_int skip
     / "0o" oct_int skip
     / "0x" hex_int skip
     /      dec_int skip


AMPERSANDEQUALS <- '&=' skip
AMPERSAND <- '&' ![=] skip
ASTERISKASTERISK <- '**' skip
ASTERISKEQUALS <- '*=' skip
ASTERISKPERCENTEQUALS <- '*%=' skip
ASTERISKPERCENT <- '*%' ![=] skip
ASTERISKPIPEEQUALS <- '*|=' skip
ASTERISKPIPE <- '*|' ![=] skip
ASTERISK <- '*' ![*=%|] skip
CARETEQUALS <- '^=' skip
CARET <- '^' ![=] skip
COLON <- ':' skip
COMMA <- ',' skip
DOTASTERISK <- '.*' skip
DOTDOTDOT <- '...' skip
DOTDOT <- '..' ![.] skip
DOTQUESTIONMARK <- '.?' skip
DOT <- '.' ![*.?] skip
EQUALSEQUALS <- '==' skip
EQUALSGREATER <- '=>' skip
EQUALS <- '=' ![=>] skip
EXCLAMEQUALS <- '!=' skip
EXCLAM <- '!' ![=] skip
FORWARDSLASHEQUALS <- '/=' skip
FORWARDSLASH <- '/' ![=] skip
GREATEREQUALS <- '>=' skip
GREATERGREATEREQUALS <- '>>=' skip
GREATERGREATER <- '>>' ![=] skip
GREATER <- '>' ![=>] skip
LBRACE <- '{' skip
LBRACKET <- '[' skip
LESSEQUALS <- '<=' skip
LESSLESSEQUALS <- '<<=' skip
LESSLESSPIPEEQUALS <- '<<|=' skip
LESSLESSPIPE <- '<<|' skip
LESSLESS <- '<<' ![=|] skip
LESS <- '<' ![<] skip
LPAREN <- '(' skip
MINUSEQUALS <- '-=' skip
MINUSPERCENTEQUALS <- '-%=' skip
MINUSPIPEEQUALS <- '-|=' skip
MINUSPIPE <- '-|' ![=] skip
MINUSPERCENT <- '-%' ![=] skip
MINUS <- '-' skip
OCTOTHORPE <- '#' skip
PERCENTEQUALS <- '%=' skip
PERCENT <- '%' ![=] skip
PIPEEQUALS <- '|=' skip
PIPE <- '|' ![=] skip
PLUSEQUALS <- '+=' skip
PLUSPERCENTEQUALS <- '+%=' skip
PLUSPERCENT <- '+%' ![=] skip
PLUSPIPEEQUALS <- '+|=' skip
PLUSPIPE <- '+|' ![=] skip
PLUSPLUS <- '++' skip
PLUS <- '+' ![+|=%] skip
RBRACE <- '}' skip
RBRACKET <- ']' skip
RPAREN <- ')' skip
SEMICOLON <- ';' skip


end_of_word <- ![a-zA-Z0-9_] skip
KEYWORD_module <- 'module' end_of_word
KEYWORD_interface <- 'interface' end_of_word
KEYWORD_enum <- 'enum' end_of_word
KEYWORD_fn <- 'fn' end_of_word
KEYWORD_struct <- 'struct' end_of_word
KEYWORD_var <- 'var' end_of_word
KEYWORD_const <- 'const' end_of_word
KEYWORD_if <- 'if' end_of_word
KEYWORD_else <- 'else' end_of_word
KEYWORD_defer <- 'defer' end_of_word
KEYWORD_errdefer <- 'errdefer' end_of_word
KEYWORD_error <- 'error' end_of_word
KEYWORD_break <- 'break' end_of_word
KEYWORD_continue <- 'continue' end_of_word
KEYWORD_switch <- 'switch' end_of_word
KEYWORD_while <- 'while' end_of_word
KEYWORD_for <- 'for' end_of_word
KEYWORD_orelse <- 'orelse' end_of_word
KEYWORD_catch <- 'catch' end_of_word
KEYWORD_or <- 'or' end_of_word
KEYWORD_and <- 'and' end_of_word
KEYWORD_try <- 'try' end_of_word
KEYWORD_return <- 'return' end_of_word
KEYWORD_implements <- 'implements' end_of_word


keyword <- KEYWORD_module / KEYWORD_interface / KEYWORD_enum / KEYWORD_fn /
KEYWORD_struct / KEYWORD_var / KEYWORD_const / KEYWORD_if / KEYWORD_else /
KEYWORD_defer / KEYWORD_errdefer / KEYWORD_error / KEYWORD_break /
KEYWORD_continue / KEYWORD_switch / KEYWORD_while / KEYWORD_for /
KEYWORD_orelse / KEYWORD_catch / KEYWORD_or / KEYWORD_and / KEYWORD_try /
KEYWORD_return / KEYWORD_implements
