const std = @import("std");
const mem = std.mem;
const testing = std.testing;
const unicode = std.unicode;
const ziglyph = @import("ziglyph");

const ArrayList = std.ArrayList;

pub const Token = struct {
    tag: Tag,
    // `source[start..end]` gets a slice containing the text corresponding to just this token
    start: usize,
    end: usize,

    pub const Tag = enum {
        invalid,
        identifier,
        string_literal,
        integer_literal,
        l_paren,
        r_paren,
        semicolon,
        l_brace,
        r_brace,
        comma,
        plus,
        minus,
        forward_slash,
        asterisk,
        single_equals,
        double_equals,
        keyword_if,
        keyword_while,
        keyword_const,
        keyword_var,
        keyword_fn,
        colon,
        dot,
    };
};

pub const Tokenizer = struct {
    buffer: []const u8,
    iterator: unicode.Utf8Iterator,
    allocator: mem.Allocator,

    const keywords = k: {
        // This is a little silly but why not
        const Tuple = std.meta.Tuple(&[_]type{ []const u8, Token.Tag });
        var index = 0;
        // On account of this being silly, it seems like it's hard to make a growable array of
        // this type
        var list: [100]Tuple = undefined;
        for (std.enums.values(Token.Tag)) |v| {
            const t = @tagName(v);
            if (std.mem.startsWith(u8, t, "keyword_")) {
                list[index] = .{ t[8..], v };
                index += 1;
            }
        }
        break :k std.ComptimeStringMap(Token.Tag, list[0..index]);
    };

    const State = enum {
        start,
        forward_slash,
        comment,
        /// Characters used for identifiers are based on the scheme standard, mainly because I
        /// incidentally already had the unicode ranges for that.
        word,
        string_literal,
        integer_literal,
        zero,
        equals,
    };

    pub fn init(allocator: mem.Allocator, source: []const u8) !Tokenizer {
        return .{
            .allocator = allocator,
            .buffer = source,
            .iterator = (try unicode.Utf8View.init(source)).iterator(),
        };
    }

    /// Caller owns returned memory.
    pub fn tokenize(self: *Tokenizer) ![]Token {
        var list = ArrayList(Token).init(self.allocator);
        while (self.next()) |token| try list.append(token);
        return list.toOwnedSlice();
    }

    fn next(self: *Tokenizer) ?Token {
        var state = State.start;
        var result = Token{
            .tag = undefined,
            .start = self.iterator.i,
            .end = undefined,
        };

        loop: while (true) {
            // Store the current iterator position, so we can fix the state after overshooting a
            // variable-length token.
            const prev_index = self.iterator.i;
            const maybe_cp = self.iterator.nextCodepoint();

            switch (state) {
                .start => if (maybe_cp) |cp| switch (cp) {
                    ' ', '\t', '\n', '\r' => {
                        result.start = self.iterator.i;
                    },
                    // zig fmt: off
                    33, 35...39, 63...90, 92, 94...122, 124, 126, 161...170, 172...186, 188...887,
                    890...895, 900...906, 908, 910...929, 931...1159, 1162...1327, 1329...1366,
                    1369...1418, 1421...1423, 1425...1479, 1488...1514, 1519...1524, 1542...1756,
                    1758...1805, 1808...1866, 1869...1969, 1984...2042, 2045...2093, 2096...2110,
                    2112...2139, 2142, 2144...2154, 2160...2190, 2200...2273, 2275...2435,
                    2437...2444, 2447...2448, 2451...2472, 2474...2480, 2482, 2486...2489,
                    2492...2500, 2503...2504, 2507...2510, 2519, 2524...2525, 2527...2531,
                    2534...2558, 2561...2563, 2565...2570, 2575...2576, 2579...2600, 2602...2608,
                    2610...2611, 2613...2614, 2616...2617, 2620, 2622...2626, 2631...2632,
                    2635...2637, 2641, 2649...2652, 2654, 2662...2678, 2689...2691, 2693...2701,
                    2703...2705, 2707...2728, 2730...2736, 2738...2739, 2741...2745, 2748...2757,
                    2759...2761, 2763...2765, 2768, 2784...2787, 2790...2801, 2809...2815,
                    2817...2819, 2821...2828, 2831...2832, 2835...2856, 2858...2864, 2866...2867,
                    2869...2873, 2876...2884, 2887...2888, 2891...2893, 2901...2903, 2908...2909,
                    2911...2915, 2918...2935, 2946...2947, 2949...2954, 2958...2960, 2962...2965,
                    2969...2970, 2972, 2974...2975, 2979...2980, 2984...2986, 2990...3001,
                    3006...3010, 3014...3016, 3018...3021, 3024, 3031, 3046...3066, 3072...3084,
                    3086...3088, 3090...3112, 3114...3129, 3132...3140, 3142...3144, 3146...3149,
                    3157...3158, 3160...3162, 3165, 3168...3171, 3174...3183, 3191...3212,
                    3214...3216, 3218...3240, 3242...3251, 3253...3257, 3260...3268, 3270...3272,
                    3274...3277, 3285...3286, 3293...3294, 3296...3299, 3302...3311, 3313...3315,
                    3328...3340, 3342...3344, 3346...3396, 3398...3400, 3402...3407, 3412...3427,
                    3430...3455, 3457...3459, 3461...3478, 3482...3505, 3507...3515, 3517,
                    3520...3526, 3530, 3535...3540, 3542, 3544...3551, 3558...3567, 3570...3572,
                    3585...3642, 3647...3675, 3713...3714, 3716, 3718...3722, 3724...3747, 3749,
                    3751...3773, 3776...3780, 3782, 3784...3790, 3792...3801, 3804...3807,
                    3840...3897, 3902...3911, 3913...3948, 3953...3991, 3993...4028, 4030...4044,
                    4046...4058, 4096...4293, 4295, 4301, 4304...4680, 4682...4685, 4688...4694,
                    4696, 4698...4701, 4704...4744, 4746...4749, 4752...4784, 4786...4789,
                    4792...4798, 4800, 4802...4805, 4808...4822, 4824...4880, 4882...4885,
                    4888...4954, 4957...4988, 4992...5017, 5024...5109, 5112...5117, 5120...5759,
                    5761...5786, 5792...5880, 5888...5909, 5919...5942, 5952...5971, 5984...5996,
                    5998...6000, 6002...6003, 6016...6109, 6112...6121, 6128...6137, 6144...6169,
                    6176...6264, 6272...6314, 6320...6389, 6400...6430, 6432...6443, 6448...6459,
                    6464, 6468...6509, 6512...6516, 6528...6571, 6576...6601, 6608...6618,
                    6622...6683, 6686...6750, 6752...6780, 6783...6793, 6800...6809, 6816...6829,
                    6832...6845, 6847...6862, 6912...6988, 6992...7038, 7040...7155, 7164...7223,
                    7227...7241, 7245...7304, 7312...7354, 7357...7367, 7376...7418, 7424...7957,
                    7960...7965, 7968...8005, 8008...8013, 8016...8023, 8025, 8027, 8029,
                    8031...8061, 8064...8116, 8118...8132, 8134...8147, 8150...8155, 8157...8175,
                    8178...8180, 8182...8190, 8203...8215, 8224...8231, 8234...8238, 8240...8248,
                    8251...8260, 8263...8286, 8288...8305, 8308...8316, 8319...8332, 8336...8348,
                    8352...8384, 8400...8412, 8417, 8421...8432, 8448...8587, 8592...8967,
                    8972...9000, 9003...9254, 9280...9290, 9312...10087, 10102...10180,
                    10183...10213, 10224...10626, 10649...10711, 10716...10747, 10750...11123,
                    11126...11157, 11159...11507, 11513...11557, 11559, 11565, 11568...11623,
                    11631...11632, 11647...11670, 11680...11686, 11688...11694, 11696...11702,
                    11704...11710, 11712...11718, 11720...11726, 11728...11734, 11736...11742,
                    11744...11777, 11782...11784, 11787, 11790...11803, 11806...11807,
                    11818...11841, 11843...11860, 11869, 11904...11929, 11931...12019,
                    12032...12245, 12272...12287, 12289...12295, 12306...12307, 12316,
                    12320...12351, 12353...12438, 12441...12543, 12549...12591, 12593...12686,
                    12688...12771, 12783...12830, 12832...42124, 42128...42182, 42192...42539,
                    42560...42607, 42611...42743, 42752...42954, 42960...42961, 42963,
                    42965...42969, 42994...43052, 43056...43065, 43072...43127, 43136...43205,
                    43214...43225, 43232...43347, 43359...43388, 43392...43469, 43471...43481,
                    43486...43518, 43520...43574, 43584...43597, 43600...43609, 43612...43714,
                    43739...43766, 43777...43782, 43785...43790, 43793...43798, 43808...43814,
                    43816...43822, 43824...43883, 43888...44013, 44016...44025, 44032...55203,
                    55216...55238, 55243...55291, 63744...64109, 64112...64217, 64256...64262,
                    64275...64279, 64285...64310, 64312...64316, 64318, 64320...64321,
                    64323...64324, 64326...64450, 64467...64829, 64832...64911, 64914...64967,
                    64975, 65008...65046, 65049, 65056...65076, 65093...65094, 65097...65106,
                    65108...65112, 65119...65126, 65128...65131, 65136...65140, 65142...65276,
                    65279, 65281...65287, 65290...65338, 65340, 65342...65370, 65372, 65374, 65377,
                    65380...65470, 65474...65479, 65482...65487, 65490...65495, 65498...65500,
                    65504...65510, 65512...65518, 65520...65528, 65532...65533, 65536...65547,
                    65549...65574, 65576...65594, 65596...65597, 65599...65613, 65616...65629,
                    65664...65786, 65792...65794, 65799...65843, 65847...65934, 65936...65948,
                    65952, 66000...66045, 66176...66204, 66208...66256, 66272...66299,
                    66304...66339, 66349...66378, 66384...66426, 66432...66461, 66463...66499,
                    66504...66517, 66560...66717, 66720...66729, 66736...66771, 66776...66811,
                    66816...66855, 66864...66915, 66927...66938, 66940...66954, 66956...66962,
                    66964...66965, 66967...66977, 66979...66993, 66995...67001, 67003...67004,
                    67072...67382, 67392...67413, 67424...67431, 67456...67461, 67463...67504,
                    67506...67514, 67584...67589, 67592, 67594...67637, 67639...67640, 67644,
                    67647...67669, 67671...67742, 67751...67759, 67808...67826, 67828...67829,
                    67835...67867, 67871...67897, 67903, 67968...68023, 68028...68047,
                    68050...68099, 68101...68102, 68108...68115, 68117...68119, 68121...68149,
                    68152...68154, 68159...68168, 68176...68184, 68192...68255, 68288...68326,
                    68331...68342, 68352...68405, 68409...68437, 68440...68466, 68472...68497,
                    68505...68508, 68521...68527, 68608...68680, 68736...68786, 68800...68850,
                    68858...68903, 68912...68921, 69216...69246, 69248...69289, 69291...69293,
                    69296...69297, 69373...69415, 69424...69465, 69488...69513, 69552...69579,
                    69600...69622, 69632...69709, 69714...69749, 69759...69820, 69822...69826,
                    69840...69864, 69872...69881, 69888...69940, 69942...69959, 69968...70006,
                    70016...70111, 70113...70132, 70144...70161, 70163...70209, 70272...70278,
                    70280, 70282...70285, 70287...70301, 70303...70313, 70320...70378,
                    70384...70393, 70400...70403, 70405...70412, 70415...70416, 70419...70440,
                    70442...70448, 70450...70451, 70453...70457, 70459...70468, 70471...70472,
                    70475...70477, 70480, 70487, 70493...70499, 70502...70508, 70512...70516,
                    70656...70747, 70749...70753, 70784...70855, 70864...70873, 71040...71093,
                    71096...71133, 71168...71236, 71248...71257, 71264...71276, 71296...71353,
                    71360...71369, 71424...71450, 71453...71467, 71472...71494, 71680...71739,
                    71840...71922, 71935...71942, 71945, 71948...71955, 71957...71958,
                    71960...71989, 71991...71992, 71995...72006, 72016...72025, 72096...72103,
                    72106...72151, 72154...72164, 72192...72263, 72272...72354, 72368...72440,
                    72448...72457, 72704...72712, 72714...72758, 72760...72773, 72784...72812,
                    72816...72847, 72850...72871, 72873...72886, 72960...72966, 72968...72969,
                    72971...73014, 73018, 73020...73021, 73023...73031, 73040...73049,
                    73056...73061, 73063...73064, 73066...73102, 73104...73105, 73107...73112,
                    73120...73129, 73440...73464, 73472...73488, 73490...73530, 73534...73561,
                    73648, 73664...73713, 73727...74649, 74752...74862, 74864...74868,
                    74880...75075, 77712...77810, 77824...78895, 78912...78933, 82944...83526,
                    92160...92728, 92736...92766, 92768...92777, 92782...92862, 92864...92873,
                    92880...92909, 92912...92917, 92928...92997, 93008...93017, 93019...93025,
                    93027...93047, 93053...93071, 93760...93850, 93952...94026, 94031...94087,
                    94095...94111, 94176...94180, 94192...94193, 94208...100343, 100352...101589,
                    101632...101640, 110576...110579, 110581...110587, 110589...110590,
                    110592...110882, 110898, 110928...110930, 110933, 110948...110951,
                    110960...111355, 113664...113770, 113776...113788, 113792...113800,
                    113808...113817, 113820...113827, 118528...118573, 118576...118598,
                    118608...118723, 118784...119029, 119040...119078, 119081...119274,
                    119296...119365, 119488...119507, 119520...119539, 119552...119638,
                    119648...119672, 119808...119892, 119894...119964, 119966...119967, 119970,
                    119973...119974, 119977...119980, 119982...119993, 119995, 119997...120003,
                    120005...120069, 120071...120074, 120077...120084, 120086...120092,
                    120094...120121, 120123...120126, 120128...120132, 120134, 120138...120144,
                    120146...120485, 120488...120779, 120782...121483, 121499...121503,
                    121505...121519, 122624...122654, 122661...122666, 122880...122886,
                    122888...122904, 122907...122913, 122915...122916, 122918...122922,
                    122928...122989, 123023, 123136...123180, 123184...123197, 123200...123209,
                    123214...123215, 123536...123566, 123584...123641, 123647, 124112...124153,
                    124896...124902, 124904...124907, 124909...124910, 124912...124926,
                    124928...125124, 125127...125142, 125184...125259, 125264...125273,
                    125278...125279, 126065...126132, 126209...126269, 126464...126467,
                    126469...126495, 126497...126498, 126500, 126503, 126505...126514,
                    126516...126519, 126521, 126523, 126530, 126535, 126537, 126539,
                    126541...126543, 126545...126546, 126548, 126551, 126553, 126555, 126557,
                    126559, 126561...126562, 126564, 126567...126570, 126572...126578,
                    126580...126583, 126585...126588, 126590, 126592...126601, 126603...126619,
                    126625...126627, 126629...126633, 126635...126651, 126704...126705,
                    126976...127019, 127024...127123, 127136...127150, 127153...127167,
                    127169...127183, 127185...127221, 127232...127405, 127462...127490,
                    127504...127547, 127552...127560, 127568...127569, 127584...127589,
                    127744...128727, 128732...128748, 128752...128764, 128768...128886,
                    128891...128985, 128992...129003, 129008, 129024...129035, 129040...129095,
                    129104...129113, 129120...129159, 129168...129197, 129200...129201,
                    129280...129619, 129632...129645, 129648...129660, 129664...129672,
                    129680...129725, 129727...129733, 129742...129755, 129760...129768,
                    129776...129784, 129792...129938, 129940...129994, 130032...130041,
                    131072...173791, 173824...177977, 177984...178205, 178208...183969,
                    183984...191456, 191472...192093, 194560...195101, 196608...201546,
                    201552...205743 => state = .word,
                    // zig fmt: on
                    '1'...'9',
                    => state = .integer_literal,
                    '0' => state = .zero,
                    '(' => {
                        result.tag = .l_paren;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    ')' => {
                        result.tag = .r_paren;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    '{' => {
                        result.tag = .l_brace;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    '}' => {
                        result.tag = .r_brace;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    ';' => {
                        result.tag = .semicolon;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    ':' => {
                        result.tag = .colon;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    '"' => state = .string_literal,
                    '/' => state = .forward_slash,
                    '+' => {
                        result.tag = .plus;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    '-' => {
                        result.tag = .minus;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    '*' => {
                        result.tag = .asterisk;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    ',' => {
                        result.tag = .comma;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    '=' => state = .equals,
                    '.' => {
                        result.tag = .dot;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    else => {
                        // const buf: [4]u8 = undefined;
                        // const len = try std.unicode.utf8Encode(cp, buf);
                        std.debug.panic(
                            "not implemented, currently at codepoint {d}: {u}",
                            .{ self.iterator.i, cp },
                        );
                    },
                } else return null,
                .equals => if (maybe_cp) |cp| switch (cp) {
                    '=' => {
                        result.tag = .double_equals;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    else => {
                        self.iterator.i = prev_index;
                        result.tag = .single_equals;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                } else {
                    result.tag = .single_equals;
                    result.end = self.iterator.i;
                    break :loop;
                },
                .zero => if (maybe_cp) |cp| switch (cp) {
                    '0'...'9', 'x', 'o', 'b' => state = .integer_literal,
                    else => {
                        self.iterator.i = prev_index;
                        result.tag = .integer_literal;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                } else {
                    result.tag = .integer_literal;
                    result.end = self.iterator.i;
                    break :loop;
                },
                .forward_slash => if (maybe_cp) |cp| switch (cp) {
                    '/' => state = .comment,
                    else => {
                        self.iterator.i = prev_index;
                        result.tag = .identifier;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                } else {
                    self.iterator.i = prev_index;
                    result.tag = .identifier;
                    result.end = self.iterator.i;
                    break :loop;
                },
                .comment => if (maybe_cp) |cp| switch (cp) {
                    '\n' => {
                        state = .start;
                        result.start = self.iterator.i;
                    },
                    else => {},
                } else return null,
                .string_literal => if (maybe_cp) |cp| switch (cp) {
                    '"' => {
                        result.tag = .string_literal;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                    else => {},
                },
                .word => if (maybe_cp) |cp| switch (cp) {
                    // zig fmt: off
                    '0'...'9',
                    33, 35...39, 63...90, 92, 94...122, 124, 126, 161...170, 172...186, 188...887,
                    890...895, 900...906, 908, 910...929, 931...1159, 1162...1327, 1329...1366,
                    1369...1418, 1421...1423, 1425...1479, 1488...1514, 1519...1524, 1542...1756,
                    1758...1805, 1808...1866, 1869...1969, 1984...2042, 2045...2093, 2096...2110,
                    2112...2139, 2142, 2144...2154, 2160...2190, 2200...2273, 2275...2435,
                    2437...2444, 2447...2448, 2451...2472, 2474...2480, 2482, 2486...2489,
                    2492...2500, 2503...2504, 2507...2510, 2519, 2524...2525, 2527...2531,
                    2534...2558, 2561...2563, 2565...2570, 2575...2576, 2579...2600, 2602...2608,
                    2610...2611, 2613...2614, 2616...2617, 2620, 2622...2626, 2631...2632,
                    2635...2637, 2641, 2649...2652, 2654, 2662...2678, 2689...2691, 2693...2701,
                    2703...2705, 2707...2728, 2730...2736, 2738...2739, 2741...2745, 2748...2757,
                    2759...2761, 2763...2765, 2768, 2784...2787, 2790...2801, 2809...2815,
                    2817...2819, 2821...2828, 2831...2832, 2835...2856, 2858...2864, 2866...2867,
                    2869...2873, 2876...2884, 2887...2888, 2891...2893, 2901...2903, 2908...2909,
                    2911...2915, 2918...2935, 2946...2947, 2949...2954, 2958...2960, 2962...2965,
                    2969...2970, 2972, 2974...2975, 2979...2980, 2984...2986, 2990...3001,
                    3006...3010, 3014...3016, 3018...3021, 3024, 3031, 3046...3066, 3072...3084,
                    3086...3088, 3090...3112, 3114...3129, 3132...3140, 3142...3144, 3146...3149,
                    3157...3158, 3160...3162, 3165, 3168...3171, 3174...3183, 3191...3212,
                    3214...3216, 3218...3240, 3242...3251, 3253...3257, 3260...3268, 3270...3272,
                    3274...3277, 3285...3286, 3293...3294, 3296...3299, 3302...3311, 3313...3315,
                    3328...3340, 3342...3344, 3346...3396, 3398...3400, 3402...3407, 3412...3427,
                    3430...3455, 3457...3459, 3461...3478, 3482...3505, 3507...3515, 3517,
                    3520...3526, 3530, 3535...3540, 3542, 3544...3551, 3558...3567, 3570...3572,
                    3585...3642, 3647...3675, 3713...3714, 3716, 3718...3722, 3724...3747, 3749,
                    3751...3773, 3776...3780, 3782, 3784...3790, 3792...3801, 3804...3807,
                    3840...3897, 3902...3911, 3913...3948, 3953...3991, 3993...4028, 4030...4044,
                    4046...4058, 4096...4293, 4295, 4301, 4304...4680, 4682...4685, 4688...4694,
                    4696, 4698...4701, 4704...4744, 4746...4749, 4752...4784, 4786...4789,
                    4792...4798, 4800, 4802...4805, 4808...4822, 4824...4880, 4882...4885,
                    4888...4954, 4957...4988, 4992...5017, 5024...5109, 5112...5117, 5120...5759,
                    5761...5786, 5792...5880, 5888...5909, 5919...5942, 5952...5971, 5984...5996,
                    5998...6000, 6002...6003, 6016...6109, 6112...6121, 6128...6137, 6144...6169,
                    6176...6264, 6272...6314, 6320...6389, 6400...6430, 6432...6443, 6448...6459,
                    6464, 6468...6509, 6512...6516, 6528...6571, 6576...6601, 6608...6618,
                    6622...6683, 6686...6750, 6752...6780, 6783...6793, 6800...6809, 6816...6829,
                    6832...6845, 6847...6862, 6912...6988, 6992...7038, 7040...7155, 7164...7223,
                    7227...7241, 7245...7304, 7312...7354, 7357...7367, 7376...7418, 7424...7957,
                    7960...7965, 7968...8005, 8008...8013, 8016...8023, 8025, 8027, 8029,
                    8031...8061, 8064...8116, 8118...8132, 8134...8147, 8150...8155, 8157...8175,
                    8178...8180, 8182...8190, 8203...8215, 8224...8231, 8234...8238, 8240...8248,
                    8251...8260, 8263...8286, 8288...8305, 8308...8316, 8319...8332, 8336...8348,
                    8352...8384, 8400...8412, 8417, 8421...8432, 8448...8587, 8592...8967,
                    8972...9000, 9003...9254, 9280...9290, 9312...10087, 10102...10180,
                    10183...10213, 10224...10626, 10649...10711, 10716...10747, 10750...11123,
                    11126...11157, 11159...11507, 11513...11557, 11559, 11565, 11568...11623,
                    11631...11632, 11647...11670, 11680...11686, 11688...11694, 11696...11702,
                    11704...11710, 11712...11718, 11720...11726, 11728...11734, 11736...11742,
                    11744...11777, 11782...11784, 11787, 11790...11803, 11806...11807,
                    11818...11841, 11843...11860, 11869, 11904...11929, 11931...12019,
                    12032...12245, 12272...12287, 12289...12295, 12306...12307, 12316,
                    12320...12351, 12353...12438, 12441...12543, 12549...12591, 12593...12686,
                    12688...12771, 12783...12830, 12832...42124, 42128...42182, 42192...42539,
                    42560...42607, 42611...42743, 42752...42954, 42960...42961, 42963,
                    42965...42969, 42994...43052, 43056...43065, 43072...43127, 43136...43205,
                    43214...43225, 43232...43347, 43359...43388, 43392...43469, 43471...43481,
                    43486...43518, 43520...43574, 43584...43597, 43600...43609, 43612...43714,
                    43739...43766, 43777...43782, 43785...43790, 43793...43798, 43808...43814,
                    43816...43822, 43824...43883, 43888...44013, 44016...44025, 44032...55203,
                    55216...55238, 55243...55291, 63744...64109, 64112...64217, 64256...64262,
                    64275...64279, 64285...64310, 64312...64316, 64318, 64320...64321,
                    64323...64324, 64326...64450, 64467...64829, 64832...64911, 64914...64967,
                    64975, 65008...65046, 65049, 65056...65076, 65093...65094, 65097...65106,
                    65108...65112, 65119...65126, 65128...65131, 65136...65140, 65142...65276,
                    65279, 65281...65287, 65290...65338, 65340, 65342...65370, 65372, 65374, 65377,
                    65380...65470, 65474...65479, 65482...65487, 65490...65495, 65498...65500,
                    65504...65510, 65512...65518, 65520...65528, 65532...65533, 65536...65547,
                    65549...65574, 65576...65594, 65596...65597, 65599...65613, 65616...65629,
                    65664...65786, 65792...65794, 65799...65843, 65847...65934, 65936...65948,
                    65952, 66000...66045, 66176...66204, 66208...66256, 66272...66299,
                    66304...66339, 66349...66378, 66384...66426, 66432...66461, 66463...66499,
                    66504...66517, 66560...66717, 66720...66729, 66736...66771, 66776...66811,
                    66816...66855, 66864...66915, 66927...66938, 66940...66954, 66956...66962,
                    66964...66965, 66967...66977, 66979...66993, 66995...67001, 67003...67004,
                    67072...67382, 67392...67413, 67424...67431, 67456...67461, 67463...67504,
                    67506...67514, 67584...67589, 67592, 67594...67637, 67639...67640, 67644,
                    67647...67669, 67671...67742, 67751...67759, 67808...67826, 67828...67829,
                    67835...67867, 67871...67897, 67903, 67968...68023, 68028...68047,
                    68050...68099, 68101...68102, 68108...68115, 68117...68119, 68121...68149,
                    68152...68154, 68159...68168, 68176...68184, 68192...68255, 68288...68326,
                    68331...68342, 68352...68405, 68409...68437, 68440...68466, 68472...68497,
                    68505...68508, 68521...68527, 68608...68680, 68736...68786, 68800...68850,
                    68858...68903, 68912...68921, 69216...69246, 69248...69289, 69291...69293,
                    69296...69297, 69373...69415, 69424...69465, 69488...69513, 69552...69579,
                    69600...69622, 69632...69709, 69714...69749, 69759...69820, 69822...69826,
                    69840...69864, 69872...69881, 69888...69940, 69942...69959, 69968...70006,
                    70016...70111, 70113...70132, 70144...70161, 70163...70209, 70272...70278,
                    70280, 70282...70285, 70287...70301, 70303...70313, 70320...70378,
                    70384...70393, 70400...70403, 70405...70412, 70415...70416, 70419...70440,
                    70442...70448, 70450...70451, 70453...70457, 70459...70468, 70471...70472,
                    70475...70477, 70480, 70487, 70493...70499, 70502...70508, 70512...70516,
                    70656...70747, 70749...70753, 70784...70855, 70864...70873, 71040...71093,
                    71096...71133, 71168...71236, 71248...71257, 71264...71276, 71296...71353,
                    71360...71369, 71424...71450, 71453...71467, 71472...71494, 71680...71739,
                    71840...71922, 71935...71942, 71945, 71948...71955, 71957...71958,
                    71960...71989, 71991...71992, 71995...72006, 72016...72025, 72096...72103,
                    72106...72151, 72154...72164, 72192...72263, 72272...72354, 72368...72440,
                    72448...72457, 72704...72712, 72714...72758, 72760...72773, 72784...72812,
                    72816...72847, 72850...72871, 72873...72886, 72960...72966, 72968...72969,
                    72971...73014, 73018, 73020...73021, 73023...73031, 73040...73049,
                    73056...73061, 73063...73064, 73066...73102, 73104...73105, 73107...73112,
                    73120...73129, 73440...73464, 73472...73488, 73490...73530, 73534...73561,
                    73648, 73664...73713, 73727...74649, 74752...74862, 74864...74868,
                    74880...75075, 77712...77810, 77824...78895, 78912...78933, 82944...83526,
                    92160...92728, 92736...92766, 92768...92777, 92782...92862, 92864...92873,
                    92880...92909, 92912...92917, 92928...92997, 93008...93017, 93019...93025,
                    93027...93047, 93053...93071, 93760...93850, 93952...94026, 94031...94087,
                    94095...94111, 94176...94180, 94192...94193, 94208...100343, 100352...101589,
                    101632...101640, 110576...110579, 110581...110587, 110589...110590,
                    110592...110882, 110898, 110928...110930, 110933, 110948...110951,
                    110960...111355, 113664...113770, 113776...113788, 113792...113800,
                    113808...113817, 113820...113827, 118528...118573, 118576...118598,
                    118608...118723, 118784...119029, 119040...119078, 119081...119274,
                    119296...119365, 119488...119507, 119520...119539, 119552...119638,
                    119648...119672, 119808...119892, 119894...119964, 119966...119967, 119970,
                    119973...119974, 119977...119980, 119982...119993, 119995, 119997...120003,
                    120005...120069, 120071...120074, 120077...120084, 120086...120092,
                    120094...120121, 120123...120126, 120128...120132, 120134, 120138...120144,
                    120146...120485, 120488...120779, 120782...121483, 121499...121503,
                    121505...121519, 122624...122654, 122661...122666, 122880...122886,
                    122888...122904, 122907...122913, 122915...122916, 122918...122922,
                    122928...122989, 123023, 123136...123180, 123184...123197, 123200...123209,
                    123214...123215, 123536...123566, 123584...123641, 123647, 124112...124153,
                    124896...124902, 124904...124907, 124909...124910, 124912...124926,
                    124928...125124, 125127...125142, 125184...125259, 125264...125273,
                    125278...125279, 126065...126132, 126209...126269, 126464...126467,
                    126469...126495, 126497...126498, 126500, 126503, 126505...126514,
                    126516...126519, 126521, 126523, 126530, 126535, 126537, 126539,
                    126541...126543, 126545...126546, 126548, 126551, 126553, 126555, 126557,
                    126559, 126561...126562, 126564, 126567...126570, 126572...126578,
                    126580...126583, 126585...126588, 126590, 126592...126601, 126603...126619,
                    126625...126627, 126629...126633, 126635...126651, 126704...126705,
                    126976...127019, 127024...127123, 127136...127150, 127153...127167,
                    127169...127183, 127185...127221, 127232...127405, 127462...127490,
                    127504...127547, 127552...127560, 127568...127569, 127584...127589,
                    127744...128727, 128732...128748, 128752...128764, 128768...128886,
                    128891...128985, 128992...129003, 129008, 129024...129035, 129040...129095,
                    129104...129113, 129120...129159, 129168...129197, 129200...129201,
                    129280...129619, 129632...129645, 129648...129660, 129664...129672,
                    129680...129725, 129727...129733, 129742...129755, 129760...129768,
                    129776...129784, 129792...129938, 129940...129994, 130032...130041,
                    131072...173791, 173824...177977, 177984...178205, 178208...183969,
                    183984...191456, 191472...192093, 194560...195101, 196608...201546,
                    201552...205743 => {},
                    // zig fmt: on
                    else => {
                        self.iterator.i = prev_index;
                        result.end = self.iterator.i;
                        result.tag = keywords.get(self.buffer[result.start..result.end]) orelse
                            .identifier;
                        break :loop;
                    },
                } else {
                    self.iterator.i = prev_index;
                    result.tag = .identifier;
                    result.end = self.iterator.i;
                    break :loop;
                },
                .integer_literal => if (maybe_cp) |cp| switch (cp) {
                    '0'...'9', 'a'...'f', 'A'...'F', '_' => {},
                    else => {
                        self.iterator.i = prev_index;
                        result.tag = .integer_literal;
                        result.end = self.iterator.i;
                        break :loop;
                    },
                } else {
                    self.iterator.i = prev_index;
                    result.tag = .integer_literal;
                    result.end = self.iterator.i;
                    break :loop;
                },
            }
        }

        return result;
    }
};

test "declaration with type" {
    const source =
        \\cats: Lil_Guy = 100;
    ;
    const expected = [_]Token{
        .{ .tag = .identifier, .start = 0, .end = 4 },
        .{ .tag = .colon, .start = 4, .end = 5 },
        .{ .tag = .identifier, .start = 6, .end = 13 },
        .{ .tag = .single_equals, .start = 14, .end = 15 },
        .{ .tag = .integer_literal, .start = 16, .end = 19 },
        .{ .tag = .semicolon, .start = 19, .end = 20 },
    };
    try expectTokens(&expected, source);
}

test "assignment" {
    const source =
        \\cats = 100;
    ;
    const expected = [_]Token{
        .{ .tag = .identifier, .start = 0, .end = 4 },
        .{ .tag = .single_equals, .start = 5, .end = 6 },
        .{ .tag = .integer_literal, .start = 7, .end = 10 },
        .{ .tag = .semicolon, .start = 10, .end = 11 },
    };
    try expectTokens(&expected, source);
}

test "unicode identifiers" {
    const source =
        \\啊 = 貓.吃(魚);
    ;
    const expected = [_]Token{
        .{ .tag = .identifier, .start = 0, .end = 3 },
        .{ .tag = .single_equals, .start = 4, .end = 5 },
        .{ .tag = .identifier, .start = 6, .end = 9 },
        .{ .tag = .dot, .start = 9, .end = 10 },
        .{ .tag = .identifier, .start = 10, .end = 13 },
        .{ .tag = .l_paren, .start = 13, .end = 14 },
        .{ .tag = .identifier, .start = 14, .end = 17 },
        .{ .tag = .r_paren, .start = 17, .end = 18 },
        .{ .tag = .semicolon, .start = 18, .end = 19 },
    };
    try expectTokens(&expected, source);
}

test "dot operator assignment" {
    const source =
        \\cats.cuteness = 9001;
    ;
    const expected = [_]Token{
        .{ .tag = .identifier, .start = 0, .end = 4 },
        .{ .tag = .dot, .start = 4, .end = 5 },
        .{ .tag = .identifier, .start = 5, .end = 13 },
        .{ .tag = .single_equals, .start = 14, .end = 15 },
        .{ .tag = .integer_literal, .start = 16, .end = 20 },
        .{ .tag = .semicolon, .start = 20, .end = 21 },
    };
    try expectTokens(&expected, source);
}

test "equality" {
    const source =
        \\dogs == 100
    ;
    const expected = [_]Token{
        .{ .tag = .identifier, .start = 0, .end = 4 },
        .{ .tag = .double_equals, .start = 5, .end = 7 },
        .{ .tag = .integer_literal, .start = 8, .end = 11 },
    };
    try expectTokens(&expected, source);
}

test "hello world" {
    const source =
        \\print("hello worl");
        \\// comment
    ;
    const expected = [_]Token{
        .{ .tag = .identifier, .start = 0, .end = 5 },
        .{ .tag = .l_paren, .start = 5, .end = 6 },
        .{ .tag = .string_literal, .start = 6, .end = 18 },
        .{ .tag = .r_paren, .start = 18, .end = 19 },
        .{ .tag = .semicolon, .start = 19, .end = 20 },
    };
    try expectTokens(&expected, source);
}

test "add two ints" {
    const source =
        \\420 + 69
    ;
    const expected = [_]Token{
        .{ .tag = .integer_literal, .start = 0, .end = 3 },
        .{ .tag = .plus, .start = 4, .end = 5 },
        .{ .tag = .integer_literal, .start = 6, .end = 8 },
    };
    try expectTokens(&expected, source);
}

test "decimal integer literal" {
    const source =
        \\5_318_008
    ;
    const expected = [_]Token{
        .{ .tag = .integer_literal, .start = 0, .end = 9 },
    };
    try expectTokens(&expected, source);
}

test "hexadecimal integer literal" {
    const source =
        \\0xCAfE_BeeF
    ;
    const expected = [_]Token{
        .{ .tag = .integer_literal, .start = 0, .end = 11 },
    };
    try expectTokens(&expected, source);
}

test "binary integer literal" {
    const source =
        \\0b010000_10___101001010101
    ;
    const expected = [_]Token{
        .{ .tag = .integer_literal, .start = 0, .end = 26 },
    };
    try expectTokens(&expected, source);
}

test "keywords" {
    const source =
        \\if while const var beepboop
    ;
    const expected = [_]Token{
        .{ .tag = .keyword_if, .start = 0, .end = 2 },
        .{ .tag = .keyword_while, .start = 3, .end = 8 },
        .{ .tag = .keyword_const, .start = 9, .end = 14 },
        .{ .tag = .keyword_var, .start = 15, .end = 18 },
        .{ .tag = .identifier, .start = 19, .end = 27 },
    };
    try expectTokens(&expected, source);
}

test "negative integer literal" {
    const source =
        \\-2_323
    ;
    const expected = [_]Token{
        .{ .tag = .minus, .start = 0, .end = 1 },
        .{ .tag = .integer_literal, .start = 1, .end = 6 },
    };
    try expectTokens(&expected, source);
}

fn expectTokens(expected: []const Token, source: []const u8) !void {
    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);
    defer arena.deinit();
    const allocator = arena.allocator();
    var tokenizer = try Tokenizer.init(allocator, source);
    const tokens = try tokenizer.tokenize();
    try testing.expectEqualSlices(Token, expected[0..], tokens);
}
